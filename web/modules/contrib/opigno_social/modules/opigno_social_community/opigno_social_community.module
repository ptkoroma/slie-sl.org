<?php

/**
 * @file
 * Contains hooks and extra functions for Opigno social communities extension.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Element;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\opigno_social_community\Entity\Community;
use Drupal\opigno_social_community\Entity\CommunityInterface;
use Drupal\opigno_social_community\Entity\CommunityInvitationInterface;
use Drupal\opigno_social_community\Entity\CommunityPostInterface;
use Drupal\opigno_social_community\Plugin\Block\SocialConnectionsCommunitiesBlock;
use Drupal\opigno_social_community\Services\CommunityManagerService;
use Drupal\opigno_statistics\Services\UserStatisticsManager;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function opigno_social_community_theme($existing, $type, $theme, $path) {
  return [
    'opigno_community_invitation' => [
      'render element' => 'elements',
    ],
    'opigno_community' => [
      'render element' => 'elements',
    ],
    'opigno_communities_join_page' => [
      'variables' => [
        'listing' => NULL,
        'pending' => NULL,
        'create_btn' => NULL,
      ],
    ],
    'opigno_community_modal' => [
      'variables' => [
        'title' => NULL,
        'body' => NULL,
        'classes' => [],
      ],
    ],
    'opigno_community_leave_confirmation' => [
      'variables' => [
        'confirm_url' => NULL,
      ],
    ],
    'opigno_community_links_dropdown' => [
      'variables' => [
        'links' => [],
      ],
    ],
    'opigno_community_manage_members_links_block' => [
      'variables' => [
        'title' => NULL,
        'links' => [],
      ],
    ],
    'opigno_community_available_communities' => [
      'variables' => [
        'managed' => [],
        'followed' => [],
        'join_btn' => NULL,
      ],
    ],
    'opigno_community_post' => [
      'base hook' => 'opigno_post',
    ],
    'opigno_connections_communities_block' => [
      'variables' => [
        'connections' => NULL,
        'connections_link' => NULL,
        'communities' => NULL,
        'communities_feed_link' => NULL,
      ],
    ],
    'opigno_community_restricted_feed' => [
      'variables' => [],
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function opigno_social_community_user_delete(EntityInterface $entity) {
  if (!$entity instanceof AccountInterface) {
    return;
  }

  // Reassign all communities created by the deleted user to admin.
  $communities = \Drupal::entityTypeManager()
    ->getStorage('opigno_community')
    ->loadByProperties(['uid' => $entity->id()]);

  if (!$communities) {
    return;
  }

  foreach ($communities as $community) {
    if ($community instanceof CommunityInterface) {
      $community->setOwner(1)->save();
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function opigno_social_community_theme_suggestions_opigno_community(array $variables) {
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  return ['opigno_community__' . $sanitized_view_mode];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function opigno_social_community_preprocess_opigno_community(&$variables) {
  $community = $variables['elements']['#opigno_community'];
  if (!$community instanceof CommunityInterface) {
    return;
  }

  // Add extra variables.
  $owner = $community->getOwner();
  $owner_name = $owner->getDisplayName();
  if ($owner instanceof UserInterface) {
    $variables['owner_picture'] = UserStatisticsManager::getUserPicture($owner, 'post_author_picture');
    $variables['owner_name'] = $owner_name;
    $variables['owner_linked_name'] = $owner->access('view')
      ? Link::createFromRoute($owner_name, 'entity.user.canonical', ['user' => $owner->id()])
      : $owner_name;
  }

  $id = $community->id();
  $variables['id'] = $id;
  $variables['url'] = Url::fromRoute('entity.opigno_community.canonical', ['opigno_community' => $id])->toString();
  $variables['created'] = $community->getCreatedTime();
  $variables['members_number'] = count($community->getMembers());
  $variables['locked'] = !$community->isPublic();
  $variables['is_current'] = \Drupal::routeMatch()->getRawParameter('opigno_community') == $id;

  // Add the default community picture.
  if (!$community->get('image')->isEmpty()) {
    $variables['picture'] = $variables['elements']['image'];
  }
  else {
    $path = \Drupal::service('extension.list.theme')->getPath('aristotle') . '/src/images/content/community_default.png';
    $title = $community->getTitle();

    $variables['picture'] = [
      '#prefix' => '<div class="community-image">',
      '#suffix' => '</div>',
      '#theme' => 'image',
      '#uri' => file_exists($path) ? \Drupal::service('file_url_generator')->transformRelative(base_path() . $path) : '',
      '#alt' => $title,
      '#title' => $title,
    ];
  }

  // Render the info block.
  $variables['info_block'] = \Drupal::entityTypeManager()
    ->getViewBuilder('opigno_community')
    ->view($community, 'info_block');

  $community_manager = \Drupal::service('opigno_social_community.manager');
  if ($community_manager instanceof CommunityManagerService) {
    $variables['create_btn'] = $community_manager->getCreateCommunityLink();
  }

  $variables['content'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function opigno_social_community_opigno_community_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity instanceof CommunityInterface && $display->getMode() === 'link_item') {
    try {
      $display->addCacheContexts(['url'])->save();
    }
    catch (EntityStorageException $e) {
      watchdog_exception('opigno_social_community_exception', $e);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function opigno_social_community_preprocess_views_view__communities__members(&$variables) {
  // Add the left side block.
  $service = \Drupal::service('opigno_social_community.manager');
  if ($service instanceof CommunityManagerService) {
    $variables['side_block'] = $service->getCommunityMemberLinksSidebar();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function opigno_social_community_preprocess_views_view__community_invitations(&$variables) {
  // Add the left side block.
  $display = $variables['display_id'] ?? '';
  $community_displays = [
    'community_sent',
    'pending_approval',
  ];
  $service = \Drupal::service('opigno_social_community.manager');

  if ($service instanceof CommunityManagerService && in_array($display, $community_displays)) {
    $variables['side_block'] = $service->getCommunityMemberLinksSidebar();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function opigno_social_community_preprocess_opigno_community_invitation(&$variables) {
  $invitation = $variables['elements']['#opigno_community_invitation'];
  if (!$invitation instanceof CommunityInvitationInterface) {
    return;
  }

  $invitee = $invitation->getInvitee();
  $variables['invited_user'] = \Drupal::entityTypeManager()
    ->getViewBuilder('user')
    ->view($invitee, 'community_invitation');

  $variables['content'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function opigno_social_community_theme_suggestions_opigno_post_alter(array &$suggestions, array $variables) {
  $post = $variables['elements']['#opigno_community_post'] ?? NULL;
  if ($post instanceof CommunityPostInterface) {
    $suggestions[] = $post->isComment() ? 'opigno_post__comment' : 'opigno_post';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function opigno_social_community_preprocess_opigno_post(&$variables) {
  $post = $variables['elements']['#opigno_community_post'] ?? NULL;
  if (!$post instanceof CommunityPostInterface) {
    return;
  }

  $community = $post->getCommunity();
  if (isset($variables['like_link'])
    && $community instanceof CommunityInterface
    && !$community->isMember(\Drupal::currentUser())
  ) {
    $variables['like_link'] = [];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function opigno_social_community_form_entity_browser_community_images_media_entity_browser_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form["#attached"]['library'][] = 'opigno_learning_path/opigno_dropzonejs_widgets';
}

/**
 * Implements hook_block_alter().
 */
function opigno_social_community_block_alter(&$definitions) {
  // Override the "User connections block", add the communities info.
  if (isset($definitions['opigno_user_connections_block'])) {
    $definitions['opigno_user_connections_block']['class'] = SocialConnectionsCommunitiesBlock::class;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function opigno_social_community_form_social_settings_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add the checkbox to enable/disable communities-related features.
  $form['enable_communities'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable communities'),
    '#description' => t('If checked, communities, community invitations and posts features will be accessible.'),
    '#default_value' => \Drupal::config(Community::ADMIN_CONFIG_NAME)->get('enable_communities') ?? FALSE,
    '#states' => [
      'visible' => [':input[name="enable_social_features"]' => ['checked' => TRUE]],
    ],
  ];
  $form['#submit'][] = 'opigno_social_community_social_features_submit';
}

/**
 * Extra submit for the social settings form to store "communities" checkbox.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 */
function opigno_social_community_social_features_submit(array &$form, FormStateInterface $form_state): void {
  // Check if social features enabled, communities can not be enabled if socials
  // disabled.
  $is_enabled = $form_state->getValue('enable_social_features', FALSE)
    && $form_state->getValue('enable_communities', FALSE);
  // Set the "enable_communities" setting value.
  \Drupal::configFactory()->getEditable(Community::ADMIN_CONFIG_NAME)
    ->set('enable_communities', $is_enabled)
    ->save(TRUE);
}
