<?php

/**
 * @file
 * Contains stripe_registration.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Url;
use Stripe\Customer;
use Stripe\Plan;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\stripe_registration\StripeRegistrationService;

/**
 * Implements hook_help().
 */
function stripe_registration_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the stripe_registration module.
    case 'help.page.stripe_registration':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Facilitates paid site registration via a Stripe subscription plan.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function stripe_registration_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'user_register_form':
      if (\Drupal::config('stripe_registration.settings')->get('registration')) {
        stripe_registration_subscribe_form($form, $form_state, $form_id);
      }
      break;

    case 'stripe_subscribe_form':
      stripe_registration_subscribe_form($form, $form_state, $form_id);
      break;

    case 'stripe_api_admin_form':
      stripe_registration_admin_form($form, $form_state, $form_id);

      break;

    case 'user_form':
      hide_update_profile_field_form($form, $form_state, $form_id);

      break;  
  }



}

function hide_update_profile_field_form(array &$form, FormStateInterface $form_state, $form_id) {
       if (!in_array('administrator',\Drupal::currentUser()->getRoles())) {
       // hide($form['account']['pass']);
        hide($form['account']['mail']);
       // hide($form['account']['current_pass']);
        hide($form['field_correspondence']);
        hide($form['field_date_of_birth']);
        hide($form['field_field_of_engineering_user']);
        hide($form['field_membership__level']);
        hide($form['field_membership_number']);
        hide($form['field_membership_status_']);
        hide($form['field_nationality']);
        hide($form['field_next_payment_due_date']);
        hide($form['field_next_renewal_date_']);
        hide($form['field_pdu_total']);
        hide($form['field_place_of_birth']);
        hide($form['field_pdu_total']);
        hide($form['field_place_of_birth']);
        hide($form['field_present_employer']);
        hide($form['field_yearly_pdu_target']);
        hide($form['private_messages']);
        hide($form['contact']);
        hide($form['field_telephone']);
        hide($form['language']);
        hide($form['timezone']);

        // below field is disabled
        $form['account']['mail']['#disabled'] = TRUE;
        $form['field_correspondence']['#disabled'] = TRUE;
        $form['field_field_of_engineering_user']['#disabled'] = TRUE;
        $form['field_membership__level']['#disabled'] = TRUE;
        $form['field_membership_number']['#disabled'] = TRUE;
        $form['field_nationality']['#disabled'] = TRUE;
        $form['field_next_payment_due_date']['#disabled'] = TRUE;
        $form['field_next_renewal_date_']['#disabled'] = TRUE;
        $form['field_pdu_total']['#disabled'] = TRUE;
        $form['field_date_of_birth']['#disabled'] = TRUE;
        $form['field_place_of_birth']['#disabled'] = TRUE;
        $form['field_present_employer']['#disabled'] = TRUE; 
        $form['field_yearly_pdu_target']['#disabled'] = TRUE; 
        $form['private_messages']['#disabled'] = TRUE; 
        $form['field_telephone']['#disabled'] = TRUE; 
      }

      // if any field is mandatory and not set earlier, user update pic or password not possible. 
        
}

function stripe_registration_admin_form(array &$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('stripe_registration.settings');
  /** @var \Drupal\stripe_api\StripeApiService $stripe_api */
  $stripe_api = \Drupal::service('stripe_api.stripe_api');

  $form['registration'] = [
    '#type' => 'checkbox',
    '#title' => t('Allow users to subscribe to plans during Drupal account registration'),
    '#description' => t('If checked, users will be able to subscribe to a plan during user account registration.'),
    '#default_value' => $config->get('registration') ? $config->get('registration') : FALSE,
  ];
  $form['redirect'] = [
    '#type' => 'checkbox',
    '#title' => t('Redirect users to Subscription page after login'),
    '#description' => t('If checked, users will immediately be redirected to the Subscription page after login if 1) They do not already have a subscription, and 2) The request does not already have a redirect query parameter.'),
    '#default_value' => $config->get('redirect') ? $config->get('redirect') : FALSE,
  ];

  $form['actions']['sync-plans'] = [
    '#type' => 'submit',
    '#value' => t('Sync plans from Stripe'),
    '#description' => t('This will create new plans and removed plans that no longer exist upstream.'),
    '#submit' => ['stripe_registration_sync_plans_submit'],
    '#weight' => 100,
    '#disabled' => !$stripe_api->getApiKey(),
  ];

  $form['#submit'][] = 'stripe_registration_admin_form_submit';
}

function stripe_registration_admin_form_submit(array &$form, FormStateInterface $form_state) {
  $config = \Drupal::configFactory()->getEditable('stripe_registration.settings');
  $config->set('registration', $form_state->getValue('registration'))->save();
  $config->set('redirect', $form_state->getValue('redirect'))->save();
}

function stripe_registration_sync_plans_submit(array &$form, FormStateInterface $form_state) {
  /** @var StripeRegistrationService $stripe */
  $stripe = \Drupal::service('stripe_registration.stripe_api');
  $stripe->syncPlans(TRUE);
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function stripe_registration_subscribe_form(&$form, FormStateInterface $form_state, $form_id) {


  /** @var \Drupal\stripe_registration\StripeRegistrationService $stripe_registration */
  $stripe_registration =  \Drupal::service('stripe_registration.stripe_api');
  $stripe_api =  \Drupal::service('stripe_api.stripe_api');

  $plans = $stripe_registration->loadLocalPlanMultiple();
  if (!$plans) {
    $form['message'] = [
      '#type' => 'markup',
      '#markup' => t('There are no plans to which you may subscribe.'),
    ];

    return FALSE;
  }

  $form['#attached']['library'][] = 'stripe_registration/stripe.stripejs';
  $form['#attached']['library'][] = 'stripe_registration/stripe.jquery.payment';
  $form['#attached']['library'][] = 'stripe_registration/checkout';
  $form['#attached']['drupalSettings']['stripe_registration']['publishable_key'] = $stripe_api->getPubKey();
  $form['#attached']['drupalSettings']['stripe_registration']['form_id'] = $form_id;

  /** @var Plan[] $options */
  $options = [];
  $current_site_mode = $stripe_api->getMode();
  $is_live_mode = $current_site_mode == 'live';

  /** @var \Drupal\stripe_registration\Entity\StripePlanEntity $plan */
  foreach ($plans as $plan) {
    if ($plan->livemode->value == $is_live_mode) {
        if ($plan->name->value == 'Admin Add Members Coupon'){
          if (in_array('administrator',\Drupal::currentUser()->getRoles())) {
              $options[$plan->plan_id->value] = $plan->name->value;
              //print_r('admin');
          }
          
        }
        else{
          $options[$plan->plan_id->value] = $plan->name->value;
        }
      // $options[$plan->plan_id->value] = $plan->name->value;
      if ($plan->data) {
        $form['#attached']['drupalSettings']['stripe_registration']['plans'][$plan->name->value] = $plan->data->getValue()[0];
      }
    }
  }

 // $form['plan'] = [
   // '#type' => 'select',
    //'#title' => t('Choose Subscription'),
    //'#options' => $options,
    //'#required' => TRUE,
  //];
  //if (count($options) == 1) {
    //$first_option = reset($options);
    //$form['plan']['#default_value'] = $first_option;
 // }

  // By omitting a name, the user-supplied data in those fields won't be
  // passed to your server when the form is submitted. This is Stripe's
  // recommended best practice. Each element also includes a data-stripe
  // attribute added by JS and used by Stripe to identify the field. Note that
  // we cannot make these fields required if there is no name attribute.

  //$form['card_number'] = [
    //'#type' => 'textfield',
    //'#title' => t('Card number'),
    //'#attributes' => [
     // 'data-stripe' => 'number',
    //],
    //'#name' => '',
  //];
  //$form['exp'] = [
    //'#type' => 'textfield',
    //'#title' => t('MM / YYYY'),
    //'#name' => '',
    //'#size' => 9,
  //];
  //$form['cvc'] = [
    //'#type' => 'textfield',
    //'#title' => t('CVC'),
    //'#attributes' => [
     // 'data-stripe' => 'cvc',
    //],
    //'#name' => '',
    //'#size' => 4,
  //];
//  $form['address_zip'] = [
  //'#type' => 'textfield',
    //'#title' => t('Billing zip'),
    //'#attributes' => [
    //  'data-stripe' => 'address_zip',
    //],
    //'#name' => '',
    //'#size' => 5,
    //'#maxlength' => 5,
  //];
  $form['stripeToken'] = [
    '#type' => 'hidden',
  ];
  $form['stripe-messages'] = [
    '#type' => 'container',
  ];
 
    // auto fill Yearly PDU target field on membership level selectlist
    $form['field_yearly_pdu_target']['#prefix'] = '<div id="select2-wrapper">';
    $form['field_yearly_pdu_target']['#suffix'] = '</div>';
   // $form['field_yearly_pdu_target']['#disabled'] = TRUE;

    // add ajax to select 1
    $form['field_membership__level']['widget']['#ajax'] = [
      'callback' => 'ajax_callback',
      'wrapper' => 'select2-wrapper',
      'event' => 'change',
      'progress' => [
        'type' => 'throbber',
        'message' => t('waiting...'),
      ],
    ];


// remove fields for display for unauthenticated user
   if (!in_array('administrator',\Drupal::currentUser()->getRoles())) {
     // $form['field_next_payment_due_date']['#disabled'] = TRUE;
     $form['field_next_payment_due_date']['#access'] = FALSE;
     $form['field_membership_number']['#access'] = FALSE;
     $form['field_next_renewal_date_']['#access'] = FALSE;
     $form['field_pdu_total']['#access'] = FALSE;
   }else{
    $form['field_membership_number']['#disabled'] = TRUE;
   }

  
  // @todo Add validation handler.

  $form['actions']['#type'] = 'actions';
  $form['actions']['submit']['#type'] = 'submit';
  $form['actions']['submit']['#value'] = t('Register');
  $form['actions']['submit']['#button_type'] = 'primary';

  //$form['actions']['submit']['#validate'][] = 'stripe_registration_validate';
  $form['actions']['submit']['#submit'][] = 'stripe_registration_submit';

  return $form;

}

/**
 * Validate callback for user_register_form.
 */
function stripe_registration_validate($form, FormStateInterface $form_state) {
  // Most form validation is performed via JavaScript. The remaining validation
  // must be performed by the Stripe API. Unfortunately, that means that we must
  // submit information to Stripe in the validation method. If we performed this
  // submission in a submit handler, we would not be able to set form errors.
   /**@var \Drupal\stripe_registration\StripeRegistrationService $stripe */
  $stripe =  \Drupal::service('stripe_registration.stripe_api');

  try {
    if (empty($form_state->getValue('stripeToken'))) {
      throw new \Exception("Stripe token is missing!");
    }
  }

  catch (\Exception $e) {
    \Drupal::logger('stripe_registration')
      ->error(t("Error to @plan plan, error:\n@stripe_error", [
        '@plan' => $form_state->getValue('plan'),
        '@stripe_error' => $e->getMessage(),
      ]));

    \Drupal::messenger()->addMessage(t("@stripe_error", [
      '@stripe_error' => $e->getMessage(),
    ]), 'error');
    $form_state->setErrorByName('stripe-messages', $e->getMessage());
  } 
}

/**
 * Submit callback for user_register_form.
 */
function stripe_registration_submit($form, FormStateInterface $form_state) {

  //below code is just copying from validate to get fix uid missing id
    // Most form validation is performed via JavaScript. The remaining validation
  // must be performed by the Stripe API. Unfortunately, that means that we must
  // submit information to Stripe in the validation method. If we performed this
  // submission in a submit handler, we would not be able to set form errors.
  /** @var \Drupal\stripe_registration\StripeRegistrationService $stripe */
  $stripe =  \Drupal::service('stripe_registration.stripe_api');
 
  try {
    if (empty($form_state->getValue('stripeToken'))) {
      throw new \Exception("Stripe token is missing!");
    }
    if (empty($form_state->getValue('uid'))) {
      throw new \Exception("Uid is missing!");
    }

    $uid = $form_state->getValue('uid');
    $user = \Drupal\user\Entity\User::load($uid);
    $customer = \Stripe\Customer::create(array(
      "source" => $form_state->getValue('stripeToken'),
      "plan" => $form_state->getValue('plan'),
      "email" => $user->getEmail(),
    ));
  

    if ($customer instanceof Customer) {
      /** @var Customer $user */
      $user = \Drupal::entityTypeManager()->getStorage('user')->load($form_state->getValue('uid'));
      $user->set('stripe_customer_id', $customer->id);
      $user->set('field_membership_number', $form_state->getValue('uid'));
      $user->save();

      foreach ($customer->subscriptions->data as $subscription) {
        $stripe->createLocalSubscription($subscription);
        \Drupal::messenger()->addMessage(t("You have successfully subscribed to the @plan_name plan.", ['@plan_name' => $form_state->getValue('plan')]), 'status');
      }
    }
  }
  catch (\Exception $e) {
    
    \Drupal::logger('stripe_registration')
      ->error(t("Could not subscribe user @uid to @plan plan, error:\n@stripe_error", [
        '@uid' => $form_state->getValue('uid'),
        '@plan' => $form_state->getValue('plan'),
        '@stripe_error' => $e->getMessage(),
      ]));
   /* $this->messenger()->addMessage(t("@stripe_error", [
      '@stripe_error' => $e->getMessage(),
    ]), 'error');*/

    \Drupal::messenger()->addMessage(t("@stripe_error", [
      '@stripe_error' => $e->getMessage(),
    ]), 'error');

    
    
  }

}
function ajax_callback($form, $form_state) {
    $memLavel = $form_state->getValue('field_membership__level');
   // \Drupal::logger('rakim developer')->warning('<pre><code>' . print_r($memLavel[0]['target_id'], TRUE) . '</code></pre>');
    $form['field_yearly_pdu_target']['widget'][0]['value']['#value'] =  $term_name = \Drupal\taxonomy\Entity\Term::load($memLavel[0]['target_id'])->get('field_pdu_yearly_target')->value;;
    return $form['field_yearly_pdu_target'];
}

/**
 * Implements hook_entity_field_access().
 */
function stripe_registration_entity_field_access($operation, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, \Drupal\Core\Session\AccountInterface $account, \Drupal\Core\Field\FieldItemListInterface $items = NULL) {
  // Prevent anyone from modifying or viewing the value of stripe_customer_id via the UI. 
  // i have made visible this field to admin
  if ($field_definition->getName() == 'stripe_customer_id') {
     if (!in_array('administrator',\Drupal::currentUser()->getRoles())) {
        return AccessResult::forbidden();
     }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_user_login().
 */
function stripe_registration_user_login($account) {
  // Un-subscribed users should be redirected to the subscribe page, unless a
  // redirect parameter is already defined.
  $config = \Drupal::config('stripe_registration.settings');
  $destination_param = \Drupal::request()->query->get('destination');
  if ($config->get('redirect') && !$destination_param) {
    /** @var StripeRegistrationService $stripe_registration */
    $stripe_registration =  \Drupal::service('stripe_registration.stripe_api');
    if (!$stripe_registration->userHasStripeSubscription($account)) {
      $url = Url::fromRoute('stripe_registration.user.subscriptions.viewall', ['user' => $account->id()]);
      $response = new RedirectResponse($url->toString());
      $response->send();

      return FALSE;
    }
  }
}

// @todo Setup cron job to remove roles from users whose subscriptions have expired.

// Licensing:
// @todo Allow purchasing of licenses for single nodes.

// allow licensing of a role or a node? abstract a la kris v?
